#ifndef IIWA_KINEMATICS_
#define IIWA_KINEMATICS_

#include <Eigen/Dense>
#include <Eigen/Geometry>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <limits>

namespace iiwa_kinematics {

static struct Parameters {
    double l_1z,
        l_3z,
        l_5z,
        l_7z;

    Parameters() {
        l_1z = 0.360;
        l_3z = 0.420;
        l_5z = 0.400;
        // l_7z = 0.126;
        l_7z = 0.226;
    }
} P;

void forwarkKinematics(Eigen::Vector3d &T, Eigen::Matrix<double, 7, 1> &q) {
    T[0] = P.l_3z * sin(q[1]) * cos(q[0]) + P.l_5z * (-(-sin(q[0]) * sin(q[2]) + cos(q[0]) * cos(q[1]) * cos(q[2])) * sin(q[3]) + sin(q[1]) * cos(q[0]) * cos(q[3])) + P.l_7z * ((((-sin(q[0]) * sin(q[2]) + cos(q[0]) * cos(q[1]) * cos(q[2])) * cos(q[3]) + sin(q[1]) * sin(q[3]) * cos(q[0])) * cos(q[4]) - (sin(q[0]) * cos(q[2]) + sin(q[2]) * cos(q[0]) * cos(q[1])) * sin(q[4])) * sin(q[5]) - ((-sin(q[0]) * sin(q[2]) + cos(q[0]) * cos(q[1]) * cos(q[2])) * sin(q[3]) - sin(q[1]) * cos(q[0]) * cos(q[3])) * cos(q[5]));
    T[1] = P.l_3z * sin(q[0]) * sin(q[1]) + P.l_5z * (-(sin(q[0]) * cos(q[1]) * cos(q[2]) + sin(q[2]) * cos(q[0])) * sin(q[3]) + sin(q[0]) * sin(q[1]) * cos(q[3])) + P.l_7z * ((((sin(q[0]) * cos(q[1]) * cos(q[2]) + sin(q[2]) * cos(q[0])) * cos(q[3]) + sin(q[0]) * sin(q[1]) * sin(q[3])) * cos(q[4]) + (-sin(q[0]) * sin(q[2]) * cos(q[1]) + cos(q[0]) * cos(q[2])) * sin(q[4])) * sin(q[5]) - ((sin(q[0]) * cos(q[1]) * cos(q[2]) + sin(q[2]) * cos(q[0])) * sin(q[3]) - sin(q[0]) * sin(q[1]) * cos(q[3])) * cos(q[5]));
    T[2] = P.l_1z + P.l_3z * cos(q[1]) + P.l_5z * (sin(q[1]) * sin(q[3]) * cos(q[2]) + cos(q[1]) * cos(q[3])) + P.l_7z * (((-sin(q[1]) * cos(q[2]) * cos(q[3]) + sin(q[3]) * cos(q[1])) * cos(q[4]) + sin(q[1]) * sin(q[2]) * sin(q[4])) * sin(q[5]) + (sin(q[1]) * sin(q[3]) * cos(q[2]) + cos(q[1]) * cos(q[3])) * cos(q[5]));
}

void forwarkKinematics(Eigen::Quaterniond &quat, Eigen::Vector3d &T, Eigen::Matrix<double, 7, 1> &q) {
    // Position
    forwarkKinematics(T, q);

    // Rotation
    quat.w() = cos(q[6] / 2) * (cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[2] / 2) * sin(q[4] / 2) - cos(q[0] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[1] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[3] / 2) - cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[4] / 2) - cos(q[1] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[2] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[3] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) + cos(q[1] / 2) * cos(q[2] / 2) * sin(q[0] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[2] / 2) * cos(q[3] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[2] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[4] / 2) - cos(q[3] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[5] / 2) + cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2)) - sin(q[6] / 2) * (cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[4] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[2] / 2) + cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * cos(q[4] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * sin(q[1] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[4] / 2) + cos(q[0] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) + cos(q[1] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[4] / 2) - cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[5] / 2) + cos(q[2] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[3] / 2) + cos(q[1] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[3] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2));
    quat.x() = sin(q[6] / 2) * (cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[3] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[1] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[3] / 2) * sin(q[2] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[5] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[4] / 2) - cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * sin(q[0] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[2] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[3] / 2) * sin(q[4] / 2) - cos(q[1] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[5] / 2) + cos(q[1] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[3] / 2) + cos(q[2] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[4] / 2) + cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) + cos(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[2] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[4] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[5] / 2)) - cos(q[6] / 2) * (cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[5] / 2) * sin(q[3] / 2) * sin(q[4] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[2] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[2] / 2) * sin(q[3] / 2) - cos(q[0] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[4] / 2) - cos(q[0] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[2] / 2) + cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[3] / 2) + cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[4] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[3] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) + cos(q[2] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[3] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[4] / 2) + sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2));
    quat.y() = cos(q[6] / 2) * (cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[3] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[1] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[3] / 2) * sin(q[2] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[5] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[4] / 2) - cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * sin(q[0] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[2] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[3] / 2) * sin(q[4] / 2) - cos(q[1] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[5] / 2) + cos(q[1] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[3] / 2) + cos(q[2] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[4] / 2) + cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) + cos(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[2] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[4] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[5] / 2)) + sin(q[6] / 2) * (cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[5] / 2) * sin(q[3] / 2) * sin(q[4] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[2] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[2] / 2) * sin(q[3] / 2) - cos(q[0] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[4] / 2) - cos(q[0] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[2] / 2) + cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[3] / 2) + cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[4] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[3] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) + cos(q[2] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[3] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[4] / 2) + sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2));
    quat.z() = cos(q[6] / 2) * (cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[4] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[2] / 2) + cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * cos(q[4] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * sin(q[1] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[4] / 2) + cos(q[0] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) + cos(q[1] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[4] / 2) - cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[5] / 2) + cos(q[2] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[3] / 2) + cos(q[1] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[3] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2)) + sin(q[6] / 2) * (cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[0] / 2) * cos(q[1] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[2] / 2) * sin(q[4] / 2) - cos(q[0] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * sin(q[1] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[2] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[3] / 2) - cos(q[1] / 2) * cos(q[2] / 2) * cos(q[3] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[4] / 2) - cos(q[1] / 2) * cos(q[3] / 2) * cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[2] / 2) + cos(q[0] / 2) * cos(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[3] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[4] / 2) * sin(q[5] / 2) + cos(q[0] / 2) * cos(q[5] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[4] / 2) + cos(q[1] / 2) * cos(q[2] / 2) * sin(q[0] / 2) * sin(q[3] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[1] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[2] / 2) * sin(q[3] / 2) * sin(q[5] / 2) - cos(q[2] / 2) * cos(q[3] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[4] / 2) * sin(q[5] / 2) - cos(q[2] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[3] / 2) * sin(q[4] / 2) - cos(q[3] / 2) * cos(q[4] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[5] / 2) + cos(q[4] / 2) * cos(q[5] / 2) * sin(q[0] / 2) * sin(q[1] / 2) * sin(q[2] / 2) * sin(q[3] / 2));
}

void jacobian(Eigen::Matrix<double, 6, 7> &J, Eigen::Matrix<double, 7, 1> &q) {
    J(0, 0) = -P.l_3z * sin(q[0]) * sin(q[1]) - P.l_5z * sin(q[0]) * sin(q[1]) * cos(q[3]) + P.l_5z * sin(q[0]) * sin(q[3]) * cos(q[1]) * cos(q[2]) + P.l_5z * sin(q[2]) * sin(q[3]) * cos(q[0]) - P.l_7z * sin(q[0]) * sin(q[1]) * sin(q[3]) * sin(q[5]) * cos(q[4]) - P.l_7z * sin(q[0]) * sin(q[1]) * cos(q[3]) * cos(q[5]) + P.l_7z * sin(q[0]) * sin(q[2]) * sin(q[4]) * sin(q[5]) * cos(q[1]) + P.l_7z * sin(q[0]) * sin(q[3]) * cos(q[1]) * cos(q[2]) * cos(q[5]) - P.l_7z * sin(q[0]) * sin(q[5]) * cos(q[1]) * cos(q[2]) * cos(q[3]) * cos(q[4]) + P.l_7z * sin(q[2]) * sin(q[3]) * cos(q[0]) * cos(q[5]) - P.l_7z * sin(q[2]) * sin(q[5]) * cos(q[0]) * cos(q[3]) * cos(q[4]) - P.l_7z * sin(q[4]) * sin(q[5]) * cos(q[0]) * cos(q[2]);
    J(1, 0) = P.l_3z * sin(q[1]) * cos(q[0]) + P.l_5z * sin(q[0]) * sin(q[2]) * sin(q[3]) + P.l_5z * sin(q[1]) * cos(q[0]) * cos(q[3]) - P.l_5z * sin(q[3]) * cos(q[0]) * cos(q[1]) * cos(q[2]) + P.l_7z * sin(q[0]) * sin(q[2]) * sin(q[3]) * cos(q[5]) - P.l_7z * sin(q[0]) * sin(q[2]) * sin(q[5]) * cos(q[3]) * cos(q[4]) - P.l_7z * sin(q[0]) * sin(q[4]) * sin(q[5]) * cos(q[2]) + P.l_7z * sin(q[1]) * sin(q[3]) * sin(q[5]) * cos(q[0]) * cos(q[4]) + P.l_7z * sin(q[1]) * cos(q[0]) * cos(q[3]) * cos(q[5]) - P.l_7z * sin(q[2]) * sin(q[4]) * sin(q[5]) * cos(q[0]) * cos(q[1]) - P.l_7z * sin(q[3]) * cos(q[0]) * cos(q[1]) * cos(q[2]) * cos(q[5]) + P.l_7z * sin(q[5]) * cos(q[0]) * cos(q[1]) * cos(q[2]) * cos(q[3]) * cos(q[4]);
    J(2, 0) = 0;
    J(3, 0) = 0;
    J(4, 0) = 0;
    J(5, 0) = 1;

    J(0, 1) = (P.l_3z * cos(q[1]) + P.l_5z * sin(q[1]) * sin(q[3]) * cos(q[2]) + P.l_5z * cos(q[1]) * cos(q[3]) + P.l_7z * sin(q[1]) * sin(q[2]) * sin(q[4]) * sin(q[5]) + P.l_7z * sin(q[1]) * sin(q[3]) * cos(q[2]) * cos(q[5]) - P.l_7z * sin(q[1]) * sin(q[5]) * cos(q[2]) * cos(q[3]) * cos(q[4]) + P.l_7z * sin(q[3]) * sin(q[5]) * cos(q[1]) * cos(q[4]) + P.l_7z * cos(q[1]) * cos(q[3]) * cos(q[5])) * cos(q[0]);
    J(1, 1) = (P.l_3z * cos(q[1]) + P.l_5z * sin(q[1]) * sin(q[3]) * cos(q[2]) + P.l_5z * cos(q[1]) * cos(q[3]) + P.l_7z * sin(q[1]) * sin(q[2]) * sin(q[4]) * sin(q[5]) + P.l_7z * sin(q[1]) * sin(q[3]) * cos(q[2]) * cos(q[5]) - P.l_7z * sin(q[1]) * sin(q[5]) * cos(q[2]) * cos(q[3]) * cos(q[4]) + P.l_7z * sin(q[3]) * sin(q[5]) * cos(q[1]) * cos(q[4]) + P.l_7z * cos(q[1]) * cos(q[3]) * cos(q[5])) * sin(q[0]);
    J(2, 1) = -P.l_3z * sin(q[1]) - P.l_5z * sin(q[1]) * cos(q[3]) + P.l_5z * sin(q[3]) * cos(q[1]) * cos(q[2]) - P.l_7z * sin(q[1]) * sin(q[3]) * sin(q[5]) * cos(q[4]) - P.l_7z * sin(q[1]) * cos(q[3]) * cos(q[5]) + P.l_7z * sin(q[2]) * sin(q[4]) * sin(q[5]) * cos(q[1]) + P.l_7z * sin(q[3]) * cos(q[1]) * cos(q[2]) * cos(q[5]) - P.l_7z * sin(q[5]) * cos(q[1]) * cos(q[2]) * cos(q[3]) * cos(q[4]);
    J(3, 1) = -sin(q[0]);
    J(4, 1) = cos(q[0]);
    J(5, 1) = 0;

    J(0, 2) = P.l_5z * sin(q[0]) * sin(q[3]) * cos(q[2]) + P.l_5z * sin(q[2]) * sin(q[3]) * cos(q[0]) * cos(q[1]) + P.l_7z * sin(q[0]) * sin(q[2]) * sin(q[4]) * sin(q[5]) + P.l_7z * sin(q[0]) * sin(q[3]) * cos(q[2]) * cos(q[5]) - P.l_7z * sin(q[0]) * sin(q[5]) * cos(q[2]) * cos(q[3]) * cos(q[4]) + P.l_7z * sin(q[2]) * sin(q[3]) * cos(q[0]) * cos(q[1]) * cos(q[5]) - P.l_7z * sin(q[2]) * sin(q[5]) * cos(q[0]) * cos(q[1]) * cos(q[3]) * cos(q[4]) - P.l_7z * sin(q[4]) * sin(q[5]) * cos(q[0]) * cos(q[1]) * cos(q[2]);
    J(1, 2) = P.l_5z * sin(q[0]) * sin(q[2]) * sin(q[3]) * cos(q[1]) - P.l_5z * sin(q[3]) * cos(q[0]) * cos(q[2]) + P.l_7z * sin(q[0]) * sin(q[2]) * sin(q[3]) * cos(q[1]) * cos(q[5]) - P.l_7z * sin(q[0]) * sin(q[2]) * sin(q[5]) * cos(q[1]) * cos(q[3]) * cos(q[4]) - P.l_7z * sin(q[0]) * sin(q[4]) * sin(q[5]) * cos(q[1]) * cos(q[2]) - P.l_7z * sin(q[2]) * sin(q[4]) * sin(q[5]) * cos(q[0]) - P.l_7z * sin(q[3]) * cos(q[0]) * cos(q[2]) * cos(q[5]) + P.l_7z * sin(q[5]) * cos(q[0]) * cos(q[2]) * cos(q[3]) * cos(q[4]);
    J(2, 2) = (-P.l_5z * sin(q[2]) * sin(q[3]) - P.l_7z * sin(q[2]) * sin(q[3]) * cos(q[5]) + P.l_7z * sin(q[2]) * sin(q[5]) * cos(q[3]) * cos(q[4]) + P.l_7z * sin(q[4]) * sin(q[5]) * cos(q[2])) * sin(q[1]);
    J(3, 2) = sin(q[1]) * cos(q[0]);
    J(4, 2) = sin(q[0]) * sin(q[1]);
    J(5, 2) = cos(q[1]);

    J(0, 3) = P.l_5z * sin(q[0]) * sin(q[2]) * cos(q[3]) - P.l_5z * sin(q[1]) * sin(q[3]) * cos(q[0]) - P.l_5z * cos(q[0]) * cos(q[1]) * cos(q[2]) * cos(q[3]) + P.l_7z * sin(q[0]) * sin(q[2]) * sin(q[3]) * sin(q[5]) * cos(q[4]) + P.l_7z * sin(q[0]) * sin(q[2]) * cos(q[3]) * cos(q[5]) - P.l_7z * sin(q[1]) * sin(q[3]) * cos(q[0]) * cos(q[5]) + P.l_7z * sin(q[1]) * sin(q[5]) * cos(q[0]) * cos(q[3]) * cos(q[4]) - P.l_7z * sin(q[3]) * sin(q[5]) * cos(q[0]) * cos(q[1]) * cos(q[2]) * cos(q[4]) - P.l_7z * cos(q[0]) * cos(q[1]) * cos(q[2]) * cos(q[3]) * cos(q[5]);
    J(1, 3) = -P.l_5z * sin(q[0]) * sin(q[1]) * sin(q[3]) - P.l_5z * sin(q[0]) * cos(q[1]) * cos(q[2]) * cos(q[3]) - P.l_5z * sin(q[2]) * cos(q[0]) * cos(q[3]) - P.l_7z * sin(q[0]) * sin(q[1]) * sin(q[3]) * cos(q[5]) + P.l_7z * sin(q[0]) * sin(q[1]) * sin(q[5]) * cos(q[3]) * cos(q[4]) - P.l_7z * sin(q[0]) * sin(q[3]) * sin(q[5]) * cos(q[1]) * cos(q[2]) * cos(q[4]) - P.l_7z * sin(q[0]) * cos(q[1]) * cos(q[2]) * cos(q[3]) * cos(q[5]) - P.l_7z * sin(q[2]) * sin(q[3]) * sin(q[5]) * cos(q[0]) * cos(q[4]) - P.l_7z * sin(q[2]) * cos(q[0]) * cos(q[3]) * cos(q[5]);
    J(2, 3) = P.l_5z * sin(q[1]) * cos(q[2]) * cos(q[3]) - P.l_5z * sin(q[3]) * cos(q[1]) + P.l_7z * sin(q[1]) * sin(q[3]) * sin(q[5]) * cos(q[2]) * cos(q[4]) + P.l_7z * sin(q[1]) * cos(q[2]) * cos(q[3]) * cos(q[5]) - P.l_7z * sin(q[3]) * cos(q[1]) * cos(q[5]) + P.l_7z * sin(q[5]) * cos(q[1]) * cos(q[3]) * cos(q[4]);
    J(3, 3) = sin(q[0]) * cos(q[2]) + sin(q[2]) * cos(q[0]) * cos(q[1]);
    J(4, 3) = sin(q[0]) * sin(q[2]) * cos(q[1]) - cos(q[0]) * cos(q[2]);
    J(5, 3) = -sin(q[1]) * sin(q[2]);

    J(0, 4) = P.l_7z * (sin(q[0]) * sin(q[2]) * sin(q[4]) * cos(q[3]) - sin(q[0]) * cos(q[2]) * cos(q[4]) - sin(q[1]) * sin(q[3]) * sin(q[4]) * cos(q[0]) - sin(q[2]) * cos(q[0]) * cos(q[1]) * cos(q[4]) - sin(q[4]) * cos(q[0]) * cos(q[1]) * cos(q[2]) * cos(q[3])) * sin(q[5]);
    J(1, 4) = P.l_7z * (-sin(q[0]) * sin(q[1]) * sin(q[3]) * sin(q[4]) - sin(q[0]) * sin(q[2]) * cos(q[1]) * cos(q[4]) - sin(q[0]) * sin(q[4]) * cos(q[1]) * cos(q[2]) * cos(q[3]) - sin(q[2]) * sin(q[4]) * cos(q[0]) * cos(q[3]) + cos(q[0]) * cos(q[2]) * cos(q[4])) * sin(q[5]);
    J(2, 4) = P.l_7z * (sin(q[1]) * sin(q[2]) * cos(q[4]) + sin(q[1]) * sin(q[4]) * cos(q[2]) * cos(q[3]) - sin(q[3]) * sin(q[4]) * cos(q[1])) * sin(q[5]);
    J(3, 4) = -(-sin(q[0]) * sin(q[2]) + cos(q[0]) * cos(q[1]) * cos(q[2])) * sin(q[3]) + sin(q[1]) * cos(q[0]) * cos(q[3]);
    J(4, 4) = -(sin(q[0]) * cos(q[1]) * cos(q[2]) + sin(q[2]) * cos(q[0])) * sin(q[3]) + sin(q[0]) * sin(q[1]) * cos(q[3]);
    J(5, 4) = sin(q[1]) * sin(q[3]) * cos(q[2]) + cos(q[1]) * cos(q[3]);

    J(0, 5) = P.l_7z * (-sin(q[0]) * sin(q[2]) * sin(q[3]) * sin(q[5]) - sin(q[0]) * sin(q[2]) * cos(q[3]) * cos(q[4]) * cos(q[5]) - sin(q[0]) * sin(q[4]) * cos(q[2]) * cos(q[5]) + sin(q[1]) * sin(q[3]) * cos(q[0]) * cos(q[4]) * cos(q[5]) - sin(q[1]) * sin(q[5]) * cos(q[0]) * cos(q[3]) - sin(q[2]) * sin(q[4]) * cos(q[0]) * cos(q[1]) * cos(q[5]) + sin(q[3]) * sin(q[5]) * cos(q[0]) * cos(q[1]) * cos(q[2]) + cos(q[0]) * cos(q[1]) * cos(q[2]) * cos(q[3]) * cos(q[4]) * cos(q[5]));
    J(1, 5) = P.l_7z * (sin(q[0]) * sin(q[1]) * sin(q[3]) * cos(q[4]) * cos(q[5]) - sin(q[0]) * sin(q[1]) * sin(q[5]) * cos(q[3]) - sin(q[0]) * sin(q[2]) * sin(q[4]) * cos(q[1]) * cos(q[5]) + sin(q[0]) * sin(q[3]) * sin(q[5]) * cos(q[1]) * cos(q[2]) + sin(q[0]) * cos(q[1]) * cos(q[2]) * cos(q[3]) * cos(q[4]) * cos(q[5]) + sin(q[2]) * sin(q[3]) * sin(q[5]) * cos(q[0]) + sin(q[2]) * cos(q[0]) * cos(q[3]) * cos(q[4]) * cos(q[5]) + sin(q[4]) * cos(q[0]) * cos(q[2]) * cos(q[5]));
    J(2, 5) = P.l_7z * (sin(q[1]) * sin(q[2]) * sin(q[4]) * cos(q[5]) - sin(q[1]) * sin(q[3]) * sin(q[5]) * cos(q[2]) - sin(q[1]) * cos(q[2]) * cos(q[3]) * cos(q[4]) * cos(q[5]) + sin(q[3]) * cos(q[1]) * cos(q[4]) * cos(q[5]) - sin(q[5]) * cos(q[1]) * cos(q[3]));
    J(3, 5) = -((-sin(q[0]) * sin(q[2]) + cos(q[0]) * cos(q[1]) * cos(q[2])) * cos(q[3]) + sin(q[1]) * sin(q[3]) * cos(q[0])) * sin(q[4]) - (sin(q[0]) * cos(q[2]) + sin(q[2]) * cos(q[0]) * cos(q[1])) * cos(q[4]);
    J(4, 5) = -((sin(q[0]) * cos(q[1]) * cos(q[2]) + sin(q[2]) * cos(q[0])) * cos(q[3]) + sin(q[0]) * sin(q[1]) * sin(q[3])) * sin(q[4]) + (-sin(q[0]) * sin(q[2]) * cos(q[1]) + cos(q[0]) * cos(q[2])) * cos(q[4]);
    J(5, 5) = -(-sin(q[1]) * cos(q[2]) * cos(q[3]) + sin(q[3]) * cos(q[1])) * sin(q[4]) + sin(q[1]) * sin(q[2]) * cos(q[4]);

    J(0, 6) = 0;
    J(1, 6) = 0;
    J(2, 6) = 0;
    J(3, 6) = (((-sin(q[0]) * sin(q[2]) + cos(q[0]) * cos(q[1]) * cos(q[2])) * cos(q[3]) + sin(q[1]) * sin(q[3]) * cos(q[0])) * cos(q[4]) - (sin(q[0]) * cos(q[2]) + sin(q[2]) * cos(q[0]) * cos(q[1])) * sin(q[4])) * sin(q[5]) - ((-sin(q[0]) * sin(q[2]) + cos(q[0]) * cos(q[1]) * cos(q[2])) * sin(q[3]) - sin(q[1]) * cos(q[0]) * cos(q[3])) * cos(q[5]);
    J(4, 6) = (((sin(q[0]) * cos(q[1]) * cos(q[2]) + sin(q[2]) * cos(q[0])) * cos(q[3]) + sin(q[0]) * sin(q[1]) * sin(q[3])) * cos(q[4]) + (-sin(q[0]) * sin(q[2]) * cos(q[1]) + cos(q[0]) * cos(q[2])) * sin(q[4])) * sin(q[5]) - ((sin(q[0]) * cos(q[1]) * cos(q[2]) + sin(q[2]) * cos(q[0])) * sin(q[3]) - sin(q[0]) * sin(q[1]) * cos(q[3])) * cos(q[5]);
    J(5, 6) = ((-sin(q[1]) * cos(q[2]) * cos(q[3]) + sin(q[3]) * cos(q[1])) * cos(q[4]) + sin(q[1]) * sin(q[2]) * sin(q[4])) * sin(q[5]) + (sin(q[1]) * sin(q[3]) * cos(q[2]) + cos(q[1]) * cos(q[3])) * cos(q[5]);
}

double normalized_angle(double q, int j) {
    if (j != 2) {
        while (q < 0.0) {
            q += 2. * M_PI;
        }
        while (q >= 2 * M_PI) {
            q -= 2. * M_PI;
        }
    } else {
        while (q > 0.0) {
            q -= 2. * M_PI;
        }
        while (q <= -2 * M_PI) {
            q += 2. * M_PI;
        }
    }
    return q;
}

};  // namespace iiwa_kinematics

#endif
